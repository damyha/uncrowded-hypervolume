/*
 * optimal_hybrid_optimizer.h
 * This optimizer optimizes a problem by creating branches of populations where each branch is generated by applying
 * optimizers in parallel. The number of generations between branches is fixed
 *
 * Implementation by D. Ha
 */

#include "optimization_branch.h"

#include "../hillvallea_internal.hpp"
#include "../optimizer.hpp"

#include "../../UHV.hpp"


namespace hillvallea {
    class optimal_hybrid_optimizer_t : public optimizer_t {
    public:
        // Constructor and destructor
        optimal_hybrid_optimizer_t(
                std::shared_ptr<UHV_t> fitness_function,
                int reinitializeOptimizers,
                const size_t number_of_parameters,
                const vec_t & lower_param_bounds,
                const vec_t & upper_param_bounds,
                double init_univariate_bandwidth,
                int optimizerIndexUHVGOMEA,
                int optimizerIndexUHVADAM,
                int versionUHV_ADAM,
                size_t numberOFUHVGOMEACallsPerStep,
                size_t numberOfUHVADAMCallsPerStep,
                size_t maxMOEvaluationsPerGeneration,
                bool keep_track_of_statistics,
                rng_pt rng,
                std::string write_directory);

        ~optimal_hybrid_optimizer_t();

        // Optimizer inherited methods
        std::string name() const;
        void initialize_from_population(population_pt initial_population);
        void generation(size_t sample_size);
//        bool checkTerminationCondition();

        void closeAllStatisticsFiles();     // Method to close all statistics files

        // Parameters population and statistics
        bool populationInitialized;     // Boolean if population is initialized
        bool keepStatistics;            // Boolean if statistics files should be maintained

        // Data of branches
        size_t totalNumberOfOptimizationProcesses;                          // Total number of branches created during optimization
        std::vector<optimization_branch_pt> activeOptimizationBranches;     // A vector containing a selection of branches

        std::string writeDirectory; // The write directory of statistics files

    private:
        // Fitness function
        std::shared_ptr<UHV_t> uhvFitnessFunction;  // The UHV fitness function

        // Optimizer variables
        int optimizerIndexUHVGOMEA;     // Optimizer index of UHV-GOMEA
        int optimizerIndexUHVADAM;      // Optimizer index of UHV-ADAM
        int versionUHVADAM;             // Method of applying UHV-ADAM on a population
        int reinitializeOptimizers;     // Boolean if optimizers should be reinitialized every generation
        size_t numberOfOptimizers;      // The total number of local optimizers
        size_t numberOFUHVGOMEACallsPerStep;  // The number of UHV-GOMEA calls to apply per step
        size_t numberOfUHVADAMCallsPerStep;   // The number of UHV-ADAM calls to apply per step

        // Optimizer statistics
        size_t maxNumberOfActiveBranches;                   // The maximum number of active branches
        size_t maxMOEvaluationsPerGeneration;               // The maximum number of MO-Evals per generation
//        size_t estimateMOEvaluationsPerBranchUHV_GOMEA;     // Estimate of MO-evals when UHV-GOMEA is executed
//        size_t estimateMOEvaluationsPerBranchUHV_ADAM;      // Estimate of MO-evals when UHV-ADAM is executed

        // Optimizer Methods
        gomea_pt createOptimizerUHV_GOMEA();                // Create new UHV-GOMEA optimizer
        adam_on_population_pt createOptimizerUHV_ADAM();    // Create new UHV-ADAM optimizer

        // Optimization branch methods
        void resetOptimizationBranchVectors();              // Resets the optimizers and population branches
        void clearHistoryActiveOptimizationBranches();      // Removes all the parent nodes of the activeOptimizationBranches
        std::string determineNewBranchStatisticsFilePath(); // Determines the filepath of a new branch

        // Optimization methods
        size_t minimumNumberOfMOEvaluationsOfActivePopulationBranches();    // Determines the minimum number of MO-evals from all active population branches
        std::vector<optimization_branch_pt> findBestPerformingOptimizationBranches(
                std::vector<optimization_branch_pt> listOfOptimizationBranches,
                size_t numberOfBranches);                                   // Determines the best branches to further investigate


        // Statistics files methods
//        void copy_statistics_file(
//                population_branch_pt branch_to_copy,
//                size_t target_branch_number,
//                std::string & target_path_statistics_file,
//                std::shared_ptr<std::ofstream> target_statistics_file);   // Copies the selected branch and assign the target_branch_number to the copy
        static std::string determineUHV_GOMEAOptimizerName(int reinitialized, int uhv_gomea_linkage_model_index);             // Determines the UHV-GOMEA optimizer name
        std::string determineUHV_ADAMOptimizerName(int reinitialized, int versionUHV_ADAM, int methodUHV_ADAM);      // Determines the UHV-Gradient optimizer name


    };
}
